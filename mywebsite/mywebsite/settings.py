"""
Django settings for mywebsite project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import environ
from datetime import timedelta
import os

env = environ.Env(DEBUG=(bool, False))
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(BASE_DIR / ".env")

LOGO_TICKETS_ROOT = os.path.join(BASE_DIR, 'logo_tickets')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = []

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",
    "http://localhost:5173",
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'djoser',
    'rest_framework_simplejwt',
    'app'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



ROOT_URLCONF = 'mywebsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mywebsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env("DB_NAME"),
        'USER': env("DB_USER"),
        'PASSWORD': env("DB_PASSWORD"),
        'HOST': env("DB_HOST"),
        'PORT': env("DB_PORT")
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'app.UserAccount'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": (
        "Bearer",
        "JWT"), # Specifies the types of authorization headers that the authentication system should recognize. In this case, it accepts both "Bearer" and "JWT" as valid authorization header types.
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=180),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=50),
    "SIGNING_KEY": env("SIGNING_KEY"), # Specifies the signing key used to sign the tokens.
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION", # Specifies the name of the HTTP header used to transmit the JWT. In this case, it's set to "HTTP_AUTHORIZATION".
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",), 
}

DJOSER = {
    'LOGIN_FIELD': 'email', # To specify that we want email instead of username for login field
    'USER_CREATE_PASSWORD_RETYPE': True, # To perform a confirm validation of password, user will have to retype his/her password during account creation
    'USERNAME_CHANGED_EMAIL_CONFIRMATION': True, # To send an email confirmation when the user changes their username
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True, # To send an email confirmation when the user changes their password
    'SEND_CONFIRMATION_EMAIL': True, # to send an email confirmation for account registration
    'PASSWORD_RESET_CONFIRM_URL': "password/reset/confirm/{uid}/{token}", # Specifies the URL pattern for resetting a password.
    'SET_PASSWORD_RETYPE': True, # Requires users to retype their new password when changing it.
    'PASSWORD_RESET_CONFIRM_RETYPE': True, # Requires users to retype their new password during the password reset process.
    'USERNAME_RESET_CONFIRM_URL': 'username/reset/confirm/{uid}/{token}', # Specifies the URL pattern for resetting a username.
    'ACTIVATION_URL': 'activate/{uid}/{token}', # Specifies the URL pattern for activating a user account.
    'SEND_ACTIVATION_EMAIL': True,
    'SERIALIZERS': {
        'user_create': 'app.serializers.CreateUserSerializer', # Serializer used for creating a user. app corresponding to the name of folder application.
        'user': "app.serializers.CreateUserSerializer", # Serializer used for user-related actions. app corresponding to the name of folder application.
        'user_delete': "djoser.serializers.UserDeleteSerializer", # Serializer used for deleting a user.   
    },
}

# configuration email, for user activation, password reset, etc. Using Mailtrap.
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_USE_TLS = True
EMAIL_PORT = env("EMAIL_PORT")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = "info@jo-de-paris.com"
DOMAIN = env("DOMAIN")
SITE_NAME = "Jeux Olympiques France"